[1;31m*******************************
<---------TEST MAP--------->
*******************************[0m
[1;34m1) CONSTRUCTORS[0m
[1;32ma) empty constructor[0m
Map is empty
map_empty.size() = 0
[1;32mb) range constructor[0m
it->first = -30 | it->second = -30
it->first = 10 | it->second = 10
it->first = 20 | it->second = 20
it->first = 40 | it->second = 40
it->first = 50 | it->second = 50
size = 5
it->first = 20 | it->second = 20
it->first = 40 | it->second = 40
size = 2
Map is empty
[1;32mc) copy constructor[0m
it->first = -30 | it->second = -30
it->first = 10 | it->second = 10
it->first = 20 | it->second = 20
it->first = 40 | it->second = 40
it->first = 50 | it->second = 50
size = 5
-------
it->first = 20 | it->second = 20
it->first = 40 | it->second = 40
size = 2
-------
Map is empty
-------
Map is empty
[1;34m2) CLEAR[0m
size = 0
size = 0
[1;34m3) COUNT[0m
map_count.count(20) = 0
map_count.count(20) = 1
map_count.count(20) = 1
[1;34m4) EMPTY[0m
map_count.empty() = 0
map_count.empty() = 1
[1;34m5) LOWER BOUND && UPPER BOUND[0m
it->first = 1 | it->second = a
it->first = 2 | it->second = b
it->first = 3 | it->second = c
it->first = 4 | it->second = d
size = 4
lower_bound[0] = 1 | a
-------
upper_bound[0] = 1 | a
-------
lower_bound[1] = 1 | a
-------
upper_bound[1] = 2 | b
-------
lower_bound[2] = 2 | b
-------
upper_bound[2] = 3 | c
-------
lower_bound[3] = 3 | c
-------
upper_bound[3] = 4 | d
-------
upper_bound(4) = end
lower_bound(5) = end
upper_bound(5) = end
[1;34m6) EQUAL RANGE[0m
lower bound points to: b => 20
upper bound points to: c => 30
[1;34m7) ERASE[0m
[1;32ma) single element erase[0m
-------
it->first = 0 | it->second = 1
it->first = 1 | it->second = 1
it->first = 3 | it->second = 1
it->first = 4 | it->second = 1
size = 4
-------
[1;32ma) erase key[0m
it->first = 0 | it->second = 1
it->first = 1 | it->second = 1
it->first = 2 | it->second = 1
it->first = 4 | it->second = 1
size = 4
-------
----------------
[1;32ma) erase range[0m
it->first = 0 | it->second = 1
it->first = 1 | it->second = 1
it->first = 2 | it->second = 1
it->first = 3 | it->second = 1
it->first = 4 | it->second = 1
size = 5
-------
----------------
it->first = 0 | it->second = 1
it->first = 1 | it->second = 1
it->first = 4 | it->second = 1
size = 3
-------
[1;34m8) FIND[0m
find(2) = 2 | 1
find(10) = end
[1;34m9) SWAP[0m
foo contains:
it->first = a | it->second = 11
it->first = b | it->second = 22
it->first = c | it->second = 33
size = 3
bar contains:
it->first = x | it->second = 100
it->first = y | it->second = 200
size = 2
foo contains:
Map is empty
pouet contains:
it->first = a | it->second = 11
it->first = b | it->second = 22
it->first = c | it->second = 33
size = 3
[1;34m10) GET ALLOCATOR[0m
allocator = 1152921504606846975
allocator = 1152921504606846975
allocator = 1152921504606846975
allocator = 1152921504606846975
[1;34m11) MAX SIZE[0m
long_map.max_size() = 192153584101141162
char_map.max_size() = 230584300921369395
uchar_map.max_size() = 230584300921369395
short_map.max_size() = 230584300921369395
ushort_map.max_size() = 230584300921369395
uint_map.max_size() = 230584300921369395
float_map.max_size() = 230584300921369395
double_map.max_size() = 192153584101141162
long_long_map.max_size() = 192153584101141162
ulong_long_map.max_size() = 192153584101141162
long_double_map.max_size() = 144115188075855871
[1;34m12) KEY COMP[0m
map_comp contains:
a => 100
b => 200
c => 300
[1;34m13) VALUE COMP[0m
map_value_comp contains:
a => 100
b => 200
c => 300
[1;34m14) OPERATOR=[0m
it->first = 0 | it->second = 0
it->first = 1 | it->second = 1
it->first = 2 | it->second = 0
it->first = 3 | it->second = 1
it->first = 4 | it->second = 0
it->first = 5 | it->second = 1
it->first = 6 | it->second = 0
it->first = 7 | it->second = 1
it->first = 8 | it->second = 0
it->first = 9 | it->second = 1
size = 10
[1;34m15) OPERATOR[][0m
map_op_bracket['a'] is an element
map_op_bracket['b'] is another element
map_op_bracket['c'] is another element
map_op_bracket['d'] is 
map_op_bracket now contains 4 elements.
a => an element
b => another element
c => another element
d => 
[1;34m16) RELATIONAL OPERATORS[0m
test == comp_test: 
MY TEST
WRONG
WRONG
EQUAL : ==
--------------------
test != comp_test: 
MY TEST
DIFFRENT : !=
--------------------
test < comp_test: 
MY TEST
LOWER : <
--------------------
test > comp_test: 
MY TEST
WRONG
--------------------
test <= comp_test: 
MY TEST
LOWER <=
--------------------
test >= comp_test: 
MY TEST
WRONG
